---
import { getCollection } from 'astro:content';

// Get the current URL path
const currentPath = Astro.url.pathname;

// Function to get content based on path
async function getContent() {
  if (currentPath === '/docs' || currentPath === '/docs/') {
    return null;
  }

  try {
    const [pathWithoutHash] = currentPath.replace('/docs/', '').split('#');
    const content = await import(`../../content/docs/${pathWithoutHash}.md`);
    return content;
  } catch (error) {
    console.error('Error loading content:', error);
    return null;
  }
}

const content = await getContent();

// Handle direct markdown access
if (Astro.request.headers.get('accept')?.includes('text/html') && content) {
  return Astro.redirect('/docs');
}
---

<div class="doc-content" id="doc-content">
  {!content ? (
    <div class="docs-welcome">
      <h1>Documentaci√≥n</h1>
      <p>Bienvenido a la documentaci√≥n oficial. Selecciona una aplicaci√≥n para comenzar.</p>
      
      <section class="featured-content">
        <h2>Contenido Destacado</h2>
        <div class="featured-grid">
          <a href="/docs/web-admin/primeros-pasos" class="featured-card doc-link">
            <div class="icon">üìö</div>
            <h3>Gu√≠a de Inicio R√°pido</h3>
            <p>Comienza con la Web Administrativa</p>
          </a>
          <a href="/docs/desktop-taq/installation" class="featured-card doc-link">
            <div class="icon">‚ö°</div>
            <h3>Taquilla Desktop</h3>
            <p>Instala y configura tu taquilla</p>
          </a>
        </div>
      </section>
    </div>
  ) : (
    <article class="markdown-content">
      <content.Content />
    </article>
  )}
</div>

<script>
  function scrollToHash() {
    const hash = window.location.hash;
    if (hash) {
      const element = document.querySelector(hash);
      if (element) {
        element.scrollIntoView({ behavior: 'smooth' });
      }
    }
  }

  async function loadContent(path) {
  try {
    if (path === '/docs' || path === '/docs/') {
      window.location.reload();
      return;
    }

    // Separar el path y el hash
    const [pathWithoutHash, hash] = path.replace('/docs/', '').split('#');
    
    // Cargar el contenido
    const response = await fetch(`/docs/${pathWithoutHash}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const html = await response.text();
    const docContent = document.getElementById('doc-content');
    
    if (docContent) {
      // Actualizar el contenido
      docContent.innerHTML = `<article class="markdown-content">${html}</article>`;
      
      // Si hay un hash, intentar hacer scroll despu√©s de que el contenido se haya cargado
      if (hash) {
        // Esperar un momento para que el DOM se actualice
        setTimeout(() => {
          const element = document.querySelector(`#${decodeURIComponent(hash)}`);
          if (element) {
            element.scrollIntoView({ behavior: 'smooth' });
          }
        }, 100);
      }
    }
  } catch (error) {
    console.error('Error loading content:', error);
  }
}

// Manejar la navegaci√≥n y el scroll inicial
document.addEventListener('DOMContentLoaded', () => {
  // Scroll inicial si hay un hash en la URL
  const hash = window.location.hash.slice(1);
  if (hash) {
    setTimeout(() => {
      const element = document.querySelector(`#${decodeURIComponent(hash)}`);
      if (element) {
        element.scrollIntoView({ behavior: 'smooth' });
      }
    }, 100);
  }
});

// Router events
window.addEventListener('router-change', ((event) => {
  const path = (event as CustomEvent).detail.path;
  window.history.pushState({}, '', path);
  loadContent(path);
}) as EventListener);

// Manejar navegaci√≥n del navegador
window.addEventListener('popstate', () => {
  loadContent(window.location.pathname + window.location.hash);
});

// Observar cambios en los enlaces del documento
const observeLinks = () => {
  document.querySelectorAll('a[href^="#"]').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const hash = link.getAttribute('href');
      if (hash) {
        const element = document.querySelector(hash);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth' });
          // Actualizar la URL sin recargar la p√°gina
          window.history.pushState(null, '', window.location.pathname + hash);
        }
      }
    });
  });
};

// Observar cambios en el DOM para actualizar los enlaces
const observer = new MutationObserver(observeLinks);
observer.observe(document.body, { 
  childList: true, 
  subtree: true 
});
</script>

<style is:global>
  .doc-content {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .docs-welcome {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  .featured-content {
    margin-top: 4rem;
  }

  .featured-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }

  .featured-card {
    background: white;
    border-radius: 8px;
    padding: 2rem;
    text-decoration: none;
    color: inherit;
    transition: all 0.2s;
    border: 1px solid var(--color-border);
  }

  .featured-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .featured-card .icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .featured-card h3 {
    margin: 0 0 0.5rem 0;
    color: var(--color-primary);
  }

  .featured-card p {
    margin: 0;
    color: var(--color-text-muted);
  }
  .markdown-content {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }

  .markdown-content h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    color: var(--color-heading);
    scroll-margin-top: 2rem;
  }

  .markdown-content h2 {
    font-size: 2rem;
    font-weight: 600;
    margin: 2rem 0 1rem;
    color: var(--color-heading);
    scroll-margin-top: 2rem;
  }

  .markdown-content h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 1.5rem 0 1rem;
    color: var(--color-heading);
    scroll-margin-top: 2rem;
  }

  .markdown-content p {
    margin-bottom: 1rem;
    line-height: 1.6;
  }

  .markdown-content img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 1.5rem 0;
    border: 1px solid var(--color-border);
  }

  .markdown-content a {
    color: var(--color-primary);
    text-decoration: none;
  }

  .markdown-content a:hover {
    text-decoration: underline;
  }

  .markdown-content strong {
    font-weight: 600;
  }

  .markdown-content ul, .markdown-content ol {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .markdown-content li {
    margin-bottom: 0.5rem;
  }

  .featured-content {
    margin-top: 4rem;
  }

  .featured-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }

  .featured-card {
    background: white;
    border-radius: 8px;
    padding: 2rem;
    text-decoration: none;
    color: inherit;
    transition: all 0.2s;
    border: 1px solid var(--color-border);
  }

  .featured-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .featured-card .icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .featured-card h3 {
    margin: 0 0 0.5rem 0;
    color: var(--color-primary);
  }

  .featured-card p {
    margin: 0;
    color: var(--color-text-muted);
  }
</style>